import streamlit as st
from PIL import Image
from keras.models import model_from_json
import numpy as np 
import json
import pandas as pd
import time
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from itertools import count
import streamlit.components.v1 as components
import time
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go


# Configurando o t√≠tulo

st.set_page_config(page_title=None, page_icon=None, layout='centered', initial_sidebar_state='expanded')

def pag_inicial():

	st.title("Soft Sensor - Redes Neurais Artificiais")
	st.markdown("---")
	st.markdown("### Pedro Oliveira Annoni Farah - Trabalho de Conclus√£o de Curso  ")
	st.markdown("---")
	st.markdown("Esta aplica√ß√£o foi desenvolvida para que fosse poss√≠vel implantar e testar um modelo de predi√ß√£o constru√≠do para se estimar o teor de vapor gerado a partir de uma rea√ß√£o de `Combust√£o` em uma `Caldeira Industrial` de uma sider√∫rgica real. ")
	st.markdown("---")
	st.markdown("")
	st.markdown("### ‚ö° Sobre a proposta")
	st.markdown("")
	#st.write(dict) 

	st.info("A proposta do trabalho foi realizar o desenvolvimento de um Sensor Virtual, isto √©, um estimador de uma vari√°vel de interesse a partir de vari√°veis de entrada e que pudesse substituir um sensor f√≠sico em uma planta sider√∫rgica  ")
	st.markdown("### üìä Sobre os dados")
	st.markdown("")
	st.info("Os dados foram coletados a partir de um banco de dados de S√©ries Temporais de uma sider√∫gica real entre os dias 1 e 8 de Agosto de 2022. Eles s√£o oriundos de medidores instalados em uma Caldeira Industrial espec√≠fica da Central Termoel√©trica desta sider√∫rgica. ")
	st.markdown("### üíª Sobre o algoritmo")
	st.markdown("")
	st.info("Para o desenvolvimento do Sensor Virtual foi desenvlovido uma Rede Neural Aritificial capaz de predizer um valor de sa√≠da de interesse, no caso, a quantidade de vapor gerada a partir das varia√°veis de entrada coletadas. ")

	st.markdown("<div align='center'><br>"
                "<img src='https://img.shields.io/badge/Feito%20COM-PYTHON%20-red?style=for-the-badge'"
                "alt='API stability' height='25'/>"
                "<img src='https://img.shields.io/badge/EDITADO%20COM-SUBLIME-blue?style=for-the-badge'"
                "alt='API stability' height='25'/>"
                "<img src='https://img.shields.io/badge/DESENVOLVIDO%20COM-Streamlit-green?style=for-the-badge'"
                "alt='API stability' height='25'/></div>", unsafe_allow_html=True)
	
	st.markdown("---")
add_sidebar = st.sidebar.selectbox("Op√ß√µes de escolha: ", ('In√≠cio','Base','Previs√£o e testes'))
if(add_sidebar == 'In√≠cio'):
	pag_inicial()





if (add_sidebar == 'Base'):
	st.title("üìë Base")
	st.markdown("---")
	st.markdown("As vari√°veis de entrada utilizadas para previs√£o da vari√°vel de sa√≠da foram escolhidas com base em estudos relacionados ao processo de Combust√£o como um todo. Sabe-se que dois dos principais componentes de uma rea√ß√£o de Combust√£o s√£o os `Combust√≠veis` e os `Comburentes`. O primeiro pode ser composto por diversas subst√¢ncias, podendo inclusive ser s√≥lido, l√≠quido ou gasoso. Enquanto isso, o comburente geralmente √© o pr√≥prio ar atmosf√©rico. Para o caso estudado, as vari√°veis de entrada utilizadss nessa caldeira s√£o as seguintes: ")
	'''
	- [x]  G√°s de Alto Forno - GAF (Nm3/h) 
	- [x]  G√°s de Coqueria - GCO (Nm3/h)
	- [x]  G√°s Natural - GN (Nm3/h)
	- [x]  G√°s Nitrog√™nio - N2 (Nm3/h)
	'''
	st.markdown("")
	st.warning("Juntamente com os combust√≠veis que alimentam a Caldeira est√° a quantidade de Ar fornecido como comburente para a rea√ß√£o. Caso a quantidade seja insuficiente, tem-se a Combust√£o Incompleta, onde nem toda a quantidade de combust√≠vel reage, levando √† forma√ß√£o do t√≥xico Mon√≥xido de Carbono. Caso a quantidade esteja em excesso, apesar de reagir com todo o combust√≠vel, esta quantidade adicional acaba por roubar calor dos produtos diminuindo a efici√™ncia da rea√ß√£o.")
	st.markdown("")
	'''
	Abaixo √© poss√≠vel escolher uma das vari√°veis de entrada para visualizar o seu comportamento durante os dias 1 e 8 de agosto de 2022: 
	'''
	option = st.selectbox("Qual vari√°vel gostaria de visualizar?",("GAF","GCO","GN","N2")) 
	st.markdown("")
	if (option == "GAF"):
		image = Image.open('GAFIMG.png')
		st.image(image, caption='G√°s de Alto Forno (Nm3/h)')
	if (option == "GCO"):
		image = Image.open('GCOIMG.png')
		st.image(image, caption='G√°s de Coqueria (Nm3/h)')
	if (option == "GN"):
		image = Image.open('GNIMG.png')
		st.image(image, caption='G√°s Natural (Nm3/h)')
	if (option == "N2"):
		image = Image.open('N2IMG.png')
		st.image(image, caption='G√°s Nitrog√™nio (Nm3/h)')
    
	st.markdown("Um par√¢metro interessante que pode ser visualizado √© a correla√ß√£o entre as vari√°veis de entrada e sa√≠da. Neste caso, a vari√°vel de sa√≠da est√° sendo considerada como a quantidade de vapor, mas ao fim ser√° o teor de Oxig√™nio: ")
	image = Image.open('CORR.png')
	st.image(image, caption='Correla√ß√£o entre vari√°veis')
	st.markdown("")
	st.markdown("Um par√¢metro interessante que pode ser visualizado √© a correla√ß√£o entre as vari√°veis de entrada e sa√≠da. Neste caso, a vari√°vel de sa√≠da est√° sendo considerada como a quantidade de vapor, mas ao fim ser√° o teor de Oxig√™nio: ")
	st.markdown("")
	st.markdown("A princ√≠pio, a Rede Neural foi montada com os seguintes par√¢metros: ")
	'''
	- [x]  2 camadas ocultas 
	- [x]  3 neur√¥nios em cada camada oculta
	- [x]  Fun√ß√£o de Ativa√ß√£o 'reLU' entre as camadas ocultas
	- [x]  Otimizador 'Adam'
	- [x]  Fun√ß√£o de Perda 'mean absolute error'
	- [x]  M√©trica principal tamb√©m 'mean absolute error'
	'''
	st.markdown("")
	st.markdown("Para um treinamento com 30 √©pocas e tamanho do Lote igual a 50, obteve-se os valores que podem ser comparados com os valores reais no gr√°fico abaixo:  ")
	image = Image.open('RESCOMP.png')
	st.image(image, caption='Compara√ß√£o entre valores previstos e reais')



if (add_sidebar == 'Previs√£o e testes'):
	st.title("üîç Previs√£o e testes!")
	st.markdown("---")
	'''
	O funcionamento do teste √© bastante simples e intuitivo. √â necess√°rio que voc√™ informe os valoers para as seguintes vari√°veis:
 1. Fluxo de G√°s de Alto Forno
 2. Fluxo de G√°s de Coqueria
 3. Fluxo de G√°s Natural 
 4. Fluxo de G√°s Nitrog√™nio
	'''
	st.markdown("---")
	st.markdown("### G√°s de Alto Forno")
	st.markdown("Primeiramente, √© necess√°rio fornecer a vaz√£o de G√°s de Alto Forno que estar√° alimentando a Caldeira Industrial nesse momento: ")
	GAF = st.number_input('Vaz√£o de G√°s de Alto Forno (Nm3/h)')
	st.markdown("### G√°s de Coqueria")
	st.markdown("Do mesmo modo, tamb√©m √© necess√°rio informar a vaz√£o de G√°s de Coqueria: ")
	GCO = st.number_input('Vaz√£o de G√°s de Coqueria (Nm3/h)')
	st.markdown("### G√°s Natural")
	st.markdown("Escolha agora a vaz√£o de G√°s Natural atrav√©s do slider:  ")
	GN = st.slider('Vaz√£o de G√°s Natural (Nm3/h)', 0,15000)
	st.markdown("### G√°s Nitrog√™nio")
	st.markdown("Agora, escolher a vaz√£o de G√°s Nitrog√™nio atrav√©s do slider:  ")
	N2 = st.slider('Vaz√£o de G√°s Nitrog√™nio (Nm3/h)', 0,15000)

	previsor = np.array([[GAF,GCO,GN,N2]])
	if st.button("Clique aqui para calcular a quantidade vapor esperada!"):
		arquivo = open('./Regressorr.json', 'r')
		estrutura = arquivo.read()
		arquivo.close()

		regressor = model_from_json(estrutura)
		regressor.load_weights('./Regressorr.h5')
		resultado = regressor.predict(previsor)
		st.info(resultado[0][0])

	carregar = st.selectbox("Carregar dados para prever sa√≠das?: ", ('Sim','N√£o'))
	if carregar == "Sim":
		upload_file = st.file_uploader("Escolha um arquivo CSV", type = 'csv')
		if upload_file is not None:
			data = pd.read_csv(upload_file)
			st.write(data)
			st.success("Dados importados com sucesso")
			if st.button("Estimar valores..."):
				## Tirar isso depois
				resultados = []
				x_vals = []
				y_vals = []
				y_vals2 = []
				previsores = data.iloc[0:1440,1:5].values
				valorReal = data.iloc[0:1440,5].values;
				arquivo = open('./Regressorr.json', 'r')
				estrutura = arquivo.read()
				arquivo.close()
				regressor = model_from_json(estrutura)
				regressor.load_weights('./Regressorr.h5')
				previsoes = regressor.predict(previsores)
				previsoes = pd.DataFrame(previsoes, columns = ['Previs√£o'])
				valorReal = pd.DataFrame(valorReal, columns = ['Vapor'])
				time1 = data.iloc[0:1440,0].values
				time1 = pd.DataFrame(time1, columns = ['Data'])
				df  = pd.concat([time1,previsoes], axis=1)
				df2 = pd.concat([time1,valorReal], axis=1)
				x = df['Data'].values
				y = df['Previs√£o'].values
				y2 = df2['Vapor'].values
				index = count()
				plt.style.use('fivethirtyeight')
				##the_plot = st.pyplot(plt)
				fig = px.line()
				##fig2 = px.line()
				
				subfig = make_subplots(specs=[[{"secondary_y":True}]])
				the_plot = st.plotly_chart(subfig)
				def animate (i):
					x_vals.append(x[i])
					y_vals.append(y[i])
					y_vals2.append(y2[i])

					plt.cla()
					plt.plot(x_vals,y_vals)
					#plt.plot(x_vals,y_vals2)
					plt.title("Valores estimados ao longo do tempo")
					plt.xlabel("Tempo")
					plt.ylabel("Quantidade de Vapor")
					if i == 0:
						subfig.add_trace(go.Scatter(x = x_vals, y = y_vals, name = "Previstos",marker= {'color': '#636EFA'}))
						subfig.add_trace(go.Scatter(x = x_vals, y = y_vals2, name = "Reais",marker= {'color': 'orange'}))
					else:
						subfig.add_trace(go.Scatter(x = x_vals, y = y_vals, showlegend = False, marker= {'color': '#636EFA'}))
						subfig.add_trace(go.Scatter(x = x_vals, y = y_vals2, showlegend = False,marker= {'color': 'orange'}))
					subfig.update_xaxes(title_text = "Tempo (minuto)")
					
					subfig.update_yaxes(title_text = "Quantidade de Vapor")
					#subfig.update_yaxes(title_text = "Tempo (minuto)")
					#fig = px.line(x = x_vals, y = y_vals, title = "Previs√µes ao longo do tempo")
					#fig2 = px.line(x = x_vals, y = y_vals2)
					#fig2.update_traces(yaxis = "y2")
					
					#subfig.add_traces(fig.data + fig2.data)
					#subfig.layout.xaxis.title = "Tempo (minuto)"
					#subfig.layout.yaxis.title = "Quantidade de Vapor"
					#subfig.layout.xaxis.title = "Tempo (minuto)"
					#subfig.layout.yaxis.title = "Quantidade de Vapor"
					subfig.update_traces(mode='markers+lines')
					subfig.update_layout(
    					xaxis_title="Tempo (minuto)",
    					yaxis_title="Quantidade de Vapor",
					yaxis_range=[60,80]
    					)
					#subfig.for_each_trace(lambda t: t.update(line = dict(color = t.marker.color)))

					#fig.show()
					#plt.tight_layout()
					#the_plot.pyplot(plt)
					the_plot.plotly_chart(subfig)
					#the_plot2.plotly_chart(fig2)
				for i in range(1000):
					animate(i)
					time.sleep(10)
				#ani = FuncAnimation(plt.gcf(), animate, interval = 10000)
